name: Deploy to AWS lambda functions

on:
  push:
    paths:
     - 'images/**'
  workflow_dispatch:


jobs:
  build_publish_deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for updated images
        id: updated-images
        run: |
          UPDATED_FILES=$(git diff --name-only HEAD^ HEAD)
          UPDATED_IMAGES=$(echo "$UPDATED_FILES" | grep "images" | cut -f 2 -d "/" | sort | uniq)

          if [ -n "$UPDATED_IMAGES" ]; then
            echo "These images have been updated:"
            echo "$UPDATED_IMAGES"
          else
            echo "No Docker images have been updated. Skipping deployment."
            exit 0
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & publish Docker image to AWS ECR
        env:
          UPDATED: ${{ steps.updated-images.outputs.UPDATED_IMAGES }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # IMAGE_TAG: ${{ github.sha }}
        run: |
          # Iterate over each updated Docker image
          IFS=$'\n'
          #### cofirm internal field separator
          #### do i need to add ${{ github.workspace }}/ for the root dir at the start of each path in UPDATED variable?
          
          for IMAGE in $UPDATED; do
            # Check whether Dockerfile exists
            if test -f "$IMAGE/Dockerfile"; then
            
              # Build & push the Docker image
              docker build \
                -f $IMAGE/Dockerfile \
                -t $ECR_REGISTRY/$IMAGE:$IMAGE_TAG \
                .
                #### needs to be like: docker build --platform linux/amd64 -t image_name:tag_name .

              docker push $ECR_REGISTRY/$IMAGE:$IMAGE_TAG
              
            else
              echo "Dockerfile not found in $IMAGE. Skipping build for this image."
            fi
          done
          
      - name: Deploy the latest ECR image to its Lambda function
        env:
          UPDATED: ${{ steps.updated-images.outputs.UPDATED_IMAGES }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Iterate for each updated Docker image
          IFS=$'\n'
          #### cofirm internal field separator
          #### do i need to add ${{ github.workspace }}/ for the root dir at the start of each path in UPDATED variable?

          for IMAGE in "$UPDATED"; do
            # Update Lambda function with the latest ECR image
            aws lambda update-function-code \
            --function-name $IMAGE \
            --image-uri $ECR_REGISTRY/$IMAGE:$IMAGE_TAG
            --publish ######## do i need this
          done
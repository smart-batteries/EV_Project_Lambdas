name: Deploy to AWS Lambda

on:
  push:
    paths:
     - 'images/**'
  workflow_dispatch:

defaults:
  run:
    working-directory: images

jobs:
  build_publish_deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for updated images
        id: updated-images
        run: |
          UPDATED_FILES=$(git diff --name-only HEAD^ HEAD)
          UPDATED_IMAGES=$(echo "$UPDATED_FILES" | grep "images" | cut -f 2 -d "/" | sort | uniq)
          echo "UPDATED_IMAGES<<EOF" >> $GITHUB_OUTPUT
          echo $UPDATED_IMAGES >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ -n $UPDATED_IMAGES ]; then
            echo "These images have been updated:"
            echo "$UPDATED_IMAGES"
          else
            echo "No Docker images have been updated. Skipping deployment."
            exit 0
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push Docker images to AWS ECR
        env:
          UPDATED: ${{ steps.updated-images.outputs.UPDATED_IMAGES }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "These images have been updated:"
          echo $UPDATED

          # Iterate over each updated Docker image
          IFS=' '

          for IMAGE in $UPDATED; do
            
            # Build & tag the Docker image
            echo "Building the image:"
            echo $IMAGE
            docker build "$IMAGE" \
              -f $IMAGE/Dockerfile \
              -t $ECR_REGISTRY/$IMAGE:latest

            # Push the Docker image
            echo "Pushing the image:"
            echo $IMAGE
            docker push $ECR_REGISTRY/$IMAGE:latest

          done

      - name: Deploy the latest ECR image to its Lambda function
        env:
          UPDATED: ${{ steps.updated-images.outputs.UPDATED_IMAGES }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "These images have been updated:"
          echo $UPDATED

          # Iterate over each updated Docker image
          IFS=$' '

          for IMAGE in $UPDATED; do

            # Update Lambda function with the latest ECR image
            echo "Deploying the image:"
            echo $IMAGE

            aws lambda update-function-code \
            --function-name $IMAGE \
            --image-uri $ECR_REGISTRY/$IMAGE:latest
            
          done